---
- name: Check if there's authorized_keys
  stat:
    path: /home/{{ username }}/.ssh/authorized_keys
  register: authorized_keys
  changed_when: (not authorized_keys.stat.exists) or (authorized_keys.stat.size == 0)

# TODO.Test if needed
- name: Install cryptography
  pip:
    name: cryptography
    state: latest

- name: Create the SSH directory
  file:
    path: "/home/{{ username }}/.ssh"
    state: directory
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: 0700

- name: Generate and install a public key pair
  when: (not authorized_keys.stat.exists or authorized_keys.stat.size == 0) and not (ssh_public_key is defined)
  block:
    - name: Generate an SSH key pair
      openssh_keypair:
        path: /tmp/id_ssh_ed25519
        type: ed25519
        passphrase: "{{ user_password }}"

    - name: Install the public key
      copy:
        src: /tmp/id_ssh_ed25519.pub
        dest: "/home/{{ username }}/.ssh/authorized_keys"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: 0600

- name: Install the existing public key
  when: ssh_public_key is defined
  authorized_key:
    user: "{{ username }}"
    key: "{{ ssh_public_key }}"

# TODO.Use prompt to print commands to test config (ask if works), stop execution if user answers n
- name: ""
  when: ssh_public_key is not defined
  pause:
    prompt: |
      Type the following command:
      scp -P 22 root@{{ ipify_public_ip }}:/tmp/id_ssh_ed25519 ~/.ssh/id_vpn_{{ username }}

      Test the SSH key by typing this command:
      ssh -p 22 {{ username }}@{{ ipify_public_ip }} -i ~/.ssh/id_vpn_{{ username }}
      Make sure the password prompt says `Enter passphrase for key` and not `{{ username }}@{{ ipify_public_ip }} password`
